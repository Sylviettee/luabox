{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Luabox","text":"<p>Luabox is a rewrite of Termion for Lua using Luv.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Raw mode</li> <li>TrueColor</li> <li>Special key event support (modifiers, special keys)</li> <li>Async I/O</li> <li>Mouse support</li> <li>And more!</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>[sudo] luarocks install luabox\n[sudo] luarocks install luabitop # For Lua versions &gt;5.3\n</code></pre>"},{"location":"#quick-example","title":"Quick example","text":"<p>This quick example shows how you can use mouse support to plot points on your terminal.</p> <pre><code>local box = require('luabox')\n\nlocal util = box.util\nlocal event = box.event\nlocal clear = box.clear\nlocal cursor = box.cursor\n\nlocal f = string.format\n\nlocal stdin, stdout = util.getHandles()\n\nlocal console = box.Console.new(stdin, stdout)\n\nconsole:setMode(1)\nconsole:intoMouseMode()\n\nconsole:write(f('%s%s', cursor.hide, clear.all))\n\nconsole.onData = function(data)\n   local first\n   local rest = {}\n\n   for char in data:gmatch('.') do\n      if not first then\n         first = char\n      else\n         table.insert(rest, char)\n      end\n   end\n\n   local iter = util.StringIterator(table.concat(rest))\n\n   local keyData = event.parse(first, iter)\n\n   if keyData.key == 'ctrl' and keyData.char == 'c' then\n      console:write(cursor.show)\n      console:setMode(0)\n      console:exitMouseMode()\n      console:close()\n\n      os.exit()\n   elseif keyData.key == 'char' and keyData.char == 'c' then\n      console:write(clear.all)\n   elseif keyData.event and keyData.event ~= 'press' then\n      local x, y = keyData.x, keyData.y\n\n      console:write(f('%sX', cursor.goTo(x, y)))\n   end\nend\n\nconsole.run()\n</code></pre> <p>For a larger example run <code>tl run examples/minesweeper/main.tl</code>. This example is a (terrible) clone of minesweeper.</p> <p>You will need teal in-order to compile.</p>"},{"location":"#todo","title":"TODO","text":"<ul> <li>[ ] - Cleanup <code>event.lua</code></li> <li>[ ] - Write tests</li> </ul>"},{"location":"classes/Console/","title":"Class <code>Console</code>","text":"<p>The Console, storing the stdin and stdout as well as some functions to control them</p>"},{"location":"classes/Console/#properties","title":"Properties","text":"Property Type Description rawMode number The number to set the console to raw mode normalMode number The number to set the console to normal mode onData function? The hook that is called when data from stdin is received"},{"location":"classes/Console/#methods","title":"Methods","text":""},{"location":"classes/Console/#consoleisttytty-tty-boolean","title":"Console.isTTY(tty: tty): boolean","text":"<p>Check if the handle is a TTY</p>"},{"location":"classes/Console/#consolenewstdin-tty-stdout-tty-console","title":"Console.new(stdin: tty, stdout: tty): Console","text":"<p>Create a new Console</p> <p>Make sure to call <code>Console.run</code> to <code>uv.run</code> in order for the console to operate</p> <p>If you need stdin and stdout, call <code>util.getHandles()</code></p> <pre><code>Console.new(util.getHandles())\n</code></pre>"},{"location":"classes/Console/#consolesetmodemode-number","title":"Console:setMode(mode: number)","text":"<p>Set the mode of the console</p>"},{"location":"classes/Console/#consolewritedata-string","title":"Console:write(data: string)","text":"<p>Write data to the console</p>"},{"location":"classes/Console/#consoleintomousemode","title":"Console:intoMouseMode()","text":"<p>Set the console into mouse mode</p>"},{"location":"classes/Console/#consoleexitmousemode","title":"Console:exitMouseMode()","text":"<p>Exit mouse mode</p>"},{"location":"classes/Console/#consolecursorpositionnoclose-boolean-number-number","title":"Console:cursorPosition(noClose: boolean): number, number","text":"<p>Get the cursor position</p> <p>This function is asynchronous and must be called from a coroutine</p>"},{"location":"classes/Console/#consolegetdimensions-number-number","title":"Console:getDimensions(): number, number","text":"<p>Get the dimensions of the console</p>"},{"location":"classes/Console/#consoleclose","title":"Console:close()","text":"<p>Closes the console</p>"},{"location":"classes/Console/#console_lockfn-any","title":"Console:_lock(fn: any)","text":"<p>Internal function to lock the console</p>"},{"location":"classes/Console/#console_ondata-any","title":"Console:_on(data: any)","text":"<p>Internal function that is called when data is received</p>"},{"location":"classes/StringIterator/","title":"Class <code>StringIterator</code>","text":"<p>A string iterator</p>"},{"location":"classes/StringIterator/#methods","title":"Methods","text":""},{"location":"classes/StringIterator/#stringiteratornextself-stringiterator-string","title":"StringIterator.next(self: StringIterator): string","text":""},{"location":"modules/clear/","title":"Module <code>clear</code>","text":"<p>Strings to clear the screen</p>"},{"location":"modules/clear/#properties","title":"Properties","text":"Property Type Description all string Clear the entire screen afterCursor string Clear the data after the cursor beforeCursor string Clear the data before the cursor currentLine string Clear the current line untilNewLine string Clear the screen until a new line"},{"location":"modules/colors/","title":"Module <code>colors</code>","text":"<p>Coloring utilities</p> <p>With colors, you pass them to either <code>colors.bg</code> or <code>colors.fg</code> in order to get the actual escape string</p> <pre><code>console:write(string.format('%sLook at my red text!', colors.fg(colors.red)))\n</code></pre>"},{"location":"modules/colors/#properties","title":"Properties","text":"Property Type Description black number red number green number yellow number blue number magenta number cyan number white number lightBlack number lightRed number lightGreen number lightYellow number lightBlue number lightMagenta number lightCyan number lightWhite number resetFg string resetBg string bg function (color: number fg function (color: number"},{"location":"modules/colors/#functions","title":"Functions","text":""},{"location":"modules/colors/#colorstruecolorr-number-g-number-b-number-table","title":"colors.truecolor(r: number, g: number, b: number): table","text":"<p>Pass to <code>bg</code> or <code>fg</code> in order to get a string</p>"},{"location":"modules/cursor/","title":"Module <code>cursor</code>","text":"<p>Cursor manipulation functions</p>"},{"location":"modules/cursor/#properties","title":"Properties","text":"Property Type Description hide string Hide the cursor show string Show the cursor restore string Restore the cursor save string Save the cursor blinkingBlock string Set the style to a blinking block steadyBlock string Set the style to a steady block blinkingUnderline string Set the style to a blinking underline steadyUnderline string Set the style to a steady underline blinkingBar string Set the style to a blinking bar steadyBar string Set the style to a steady bar"},{"location":"modules/cursor/#functions","title":"Functions","text":""},{"location":"modules/cursor/#cursorupcount-number-string","title":"cursor.up(count: number): string","text":"<p>Go up a certain count</p>"},{"location":"modules/cursor/#cursordowncount-number-string","title":"cursor.down(count: number): string","text":"<p>Go down a certain count</p>"},{"location":"modules/cursor/#cursorleftcount-number-string","title":"cursor.left(count: number): string","text":"<p>Go left a certain count</p>"},{"location":"modules/cursor/#cursorrightcount-number-string","title":"cursor.right(count: number): string","text":"<p>Go right a certain count</p>"},{"location":"modules/cursor/#cursorgotox-number-y-number-string","title":"cursor.goTo(x: number, y: number): string","text":"<p>Go to a specific location</p>"},{"location":"modules/event/","title":"Module <code>event</code>","text":"<p>Support for mouse and keyboard events.</p>"},{"location":"modules/event/#functions","title":"Functions","text":""},{"location":"modules/event/#eventparseitem-string-rest-stringiterator","title":"event.parse(item: string, rest: StringIterator)","text":"<p>Parse an event from a single character or if needed from a StringIterator</p>"},{"location":"modules/screen/","title":"Module <code>screen</code>","text":"<p>Allows for switching between the main and alternative screen buffers</p> <p>This buffer only exists on xterm compatible terminals</p>"},{"location":"modules/screen/#properties","title":"Properties","text":"Property Type Description toAlternative string Switch to the alternative screen toMain string Switch to the main screen"},{"location":"modules/scroll/","title":"Module <code>scroll</code>","text":"<p>Simple scroll functionality</p>"},{"location":"modules/scroll/#functions","title":"Functions","text":""},{"location":"modules/scroll/#scrollupcount-number-string","title":"scroll.up(count: number): string","text":"<p>Scroll up</p>"},{"location":"modules/scroll/#scrolldowncount-number-string","title":"scroll.down(count: number): string","text":"<p>Scroll down</p>"},{"location":"modules/util/","title":"Module <code>util</code>","text":"<p>The utilities module containing some utilities for internal use and others for external use</p>"},{"location":"modules/util/#functions","title":"Functions","text":""},{"location":"modules/util/#utilstringiteratorstr-string-stringiterator","title":"util.StringIterator(str: string): StringIterator","text":"<p>An iterator over strings used by event parser</p>"},{"location":"modules/util/#utilsplitstr-string-sep-string-string","title":"util.split(str: string, sep: string): string[]","text":"<p>A simple split function</p>"},{"location":"modules/util/#utilgethandles-tty-tty","title":"util.getHandles(): tty, tty","text":"<p>A function to retrieve stdin and stdout if you don't already have them</p>"},{"location":"structures/keyboardEvent/","title":"Structure <code>keyboardEvent</code>","text":""},{"location":"structures/keyboardEvent/#declaration","title":"Declaration","text":"<pre><code>local keyboardEvent = {\n   key = string,\n   char = string?\n}\n</code></pre>"},{"location":"structures/keyboardEvent/#fields","title":"Fields","text":"Field Type Description key string The key group that was pressed (F, ctrl, key, etc) char string? The character associated with the key (the 1 in F1)"},{"location":"structures/mouseEvent/","title":"Structure <code>mouseEvent</code>","text":""},{"location":"structures/mouseEvent/#declaration","title":"Declaration","text":"<pre><code>local mouseEvent = {\n   event = string,\n   x = number?,\n   y = number?,\n   button = string?\n}\n</code></pre>"},{"location":"structures/mouseEvent/#fields","title":"Fields","text":"Field Type Description event string The event that happened (clicked, held, etc) x number? The X location of the mouse y number? The Y location of the mouse button string? The button that was pressed"}]}